// Combined Shader

VertexInput {
    Binding 0 [PerVertex] { pos: vec2; uv: vec2; }
}
VertexShader {
    RasterPosition = vec4((pos + offs + chunk_offs + render_offset) * scale * vec2(1.0, ScreenAspectWH), 0.0, 1.0);
    uv_v = uv;
}
FragmentShader {
    float light = clamp(step(uv_v.x, EmbossThickness) + step(uv_v.y, EmbossThickness), 0.0, 1.0);
    float dark_inv = clamp(step(uv_v.x, 1.0 - EmbossThickness) * step(uv_v.y, 1.0 - EmbossThickness), 0.0, 1.0);
    float face_col = 0.875 * mix(1.0, 1.125, light) * mix(0.75, 1.0, dark_inv);
    Target[0] = vec4(face_col, face_col, face_col, 1.0);
}

Varyings VertexShader -> FragmentShader {
    uv_v: vec2;
}

SpecConstant[VertexShader](0) ScreenAspectWH: float = 1.0;
SpecConstant[FragmentShader](0) EmbossThickness: float = 0.1;
PushConstant[VertexShader] VertexPlacement {
    vec2 offs, scale;
    vec2 chunk_offs;
}
Uniform[VertexShader](0, 0) RenderOffset {
    vec2 render_offset;
}
