{"config":{"output_file":null,"full_docs":false,"pub_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"ucd_util","disambiguator":[1045491327034275539,6040672210809109935]},"crate_root":"C:\\Users\\S.Percentage\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ucd-util-0.1.1\\src","external_crates":[{"file_name":"C:\\Users\\S.Percentage\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ucd-util-0.1.1\\src\\lib.rs","num":8,"id":{"name":"compiler_builtins","disambiguator":[16825574870306022575,8948129443530490784]}},{"file_name":"C:\\Users\\S.Percentage\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ucd-util-0.1.1\\src\\lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[2452001442079620809,7031898473987783586]}},{"file_name":"C:\\Users\\S.Percentage\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ucd-util-0.1.1\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[257026008801274955,12461963386350563443]}},{"file_name":"C:\\Users\\S.Percentage\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ucd-util-0.1.1\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[7912589894543166650,13725509848790997879]}},{"file_name":"C:\\Users\\S.Percentage\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ucd-util-0.1.1\\src\\lib.rs","num":4,"id":{"name":"std_unicode","disambiguator":[5417497425546992192,18087750996247976147]}},{"file_name":"C:\\Users\\S.Percentage\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ucd-util-0.1.1\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[5349535592456244256,17348771569697999709]}},{"file_name":"C:\\Users\\S.Percentage\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ucd-util-0.1.1\\src\\lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[1978045193647391660,8970976202938663567]}},{"file_name":"C:\\Users\\S.Percentage\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ucd-util-0.1.1\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[7876247173013449824,6216286835442247547]}},{"file_name":"C:\\Users\\S.Percentage\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ucd-util-0.1.1\\src\\lib.rs","num":3,"id":{"name":"alloc","disambiguator":[13580575657579695419,13036432567502798103]}}],"span":{"file_name":[67,58,92,85,115,101,114,115,92,83,46,80,101,114,99,101,110,116,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,117,99,100,45,117,116,105,108,45,48,46,49,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":0,"byte_end":971,"line_start":1,"line_end":28,"column_start":1,"column_end":3}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[67,58,92,85,115,101,114,115,92,83,46,80,101,114,99,101,110,116,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,117,99,100,45,117,116,105,108,45,48,46,49,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":0,"byte_end":971,"line_start":1,"line_end":28,"column_start":1,"column_end":3},"name":"","qualname":"::","value":"C:\\Users\\S.Percentage\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ucd-util-0.1.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":23},{"krate":0,"index":30},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":49}],"decl_id":null,"docs":"The `ucd-util` crate contains a smattering of utility functions that implement\nvarious algorithms specified by Unicode. There is no specific goal for\nexhaustiveness. Instead, implementations should be added on an as-needed basis.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":[67,58,92,85,115,101,114,115,92,83,46,80,101,114,99,101,110,116,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,117,99,100,45,117,116,105,108,45,48,46,49,46,49,92,115,114,99,92,108,105,98,46,114,115],"byte_start":507,"byte_end":529,"line_start":12,"line_end":12,"column_start":1,"column_end":23}}]},{"kind":"Const","id":{"krate":0,"index":5},"span":{"file_name":[67,58,92,85,115,101,114,115,92,83,46,80,101,114,99,101,110,116,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,117,99,100,45,117,116,105,108,45,48,46,49,46,49,92,115,114,99,92,104,97,110,103,117,108,46,114,115],"byte_start":1275,"byte_end":1296,"line_start":10,"line_end":10,"column_start":11,"column_end":32},"name":"RANGE_HANGUL_SYLLABLE","qualname":"::hangul::RANGE_HANGUL_SYLLABLE","value":"&'static [(u32, u32)]","parent":null,"children":[],"decl_id":null,"docs":" A set of ranges that corresponds to the set of all Hangul syllable\n codepoints.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":12},"span":{"file_name":[67,58,92,85,115,101,114,115,92,83,46,80,101,114,99,101,110,116,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,117,99,100,45,117,116,105,108,45,48,46,49,46,49,92,115,114,99,92,104,97,110,103,117,108,46,114,115],"byte_start":1829,"byte_end":1840,"line_start":27,"line_end":27,"column_start":8,"column_end":19},"name":"hangul_name","qualname":"::hangul::hangul_name","value":"fn (cp: u32) -> Option<String>","parent":null,"children":[],"decl_id":null,"docs":" Return the character name of the given precomposed Hangul codepoint.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":13},"span":{"file_name":[67,58,92,85,115,101,114,115,92,83,46,80,101,114,99,101,110,116,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,117,99,100,45,117,116,105,108,45,48,46,49,46,49,92,115,114,99,92,104,97,110,103,117,108,46,114,115],"byte_start":2684,"byte_end":2719,"line_start":50,"line_end":50,"column_start":8,"column_end":43},"name":"hangul_full_canonical_decomposition","qualname":"::hangul::hangul_full_canonical_decomposition","value":"fn (cp: u32) -> Option<(u32, u32, Option<u32>)>","parent":null,"children":[],"decl_id":null,"docs":" Return the full canonical decomposition of the given precomposed Hangul\n codepoint.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":16},"span":{"file_name":[67,58,92,85,115,101,114,115,92,83,46,80,101,114,99,101,110,116,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,117,99,100,45,117,116,105,108,45,48,46,49,46,49,92,115,114,99,92,105,100,101,111,103,114,97,112,104,46,114,115],"byte_start":4102,"byte_end":4117,"line_start":4,"line_end":4,"column_start":11,"column_end":26},"name":"RANGE_IDEOGRAPH","qualname":"::ideograph::RANGE_IDEOGRAPH","value":"&'static [(u32, u32)]","parent":null,"children":[],"decl_id":null,"docs":" A set of ranges that corresponds to the set of all ideograph codepoints.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":17},"span":{"file_name":[67,58,92,85,115,101,114,115,92,83,46,80,101,114,99,101,110,116,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,117,99,100,45,117,116,105,108,45,48,46,49,46,49,92,115,114,99,92,105,100,101,111,103,114,97,112,104,46,114,115],"byte_start":4966,"byte_end":4980,"line_start":38,"line_end":38,"column_start":8,"column_end":22},"name":"ideograph_name","qualname":"::ideograph::ideograph_name","value":"fn (cp: u32) -> Option<String>","parent":null,"children":[],"decl_id":null,"docs":" Return the character name of the given ideograph codepoint.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":19},"span":{"file_name":[67,58,92,85,115,101,114,115,92,83,46,80,101,114,99,101,110,116,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,117,99,100,45,117,116,105,108,45,48,46,49,46,49,92,115,114,99,92,110,97,109,101,46,114,115],"byte_start":6356,"byte_end":6380,"line_start":4,"line_end":4,"column_start":8,"column_end":32},"name":"character_name_normalize","qualname":"::name::character_name_normalize","value":"fn (string: &mut String) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Normalize the given character name in place according to UAX44-LM2.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":21},"span":{"file_name":[67,58,92,85,115,101,114,115,92,83,46,80,101,114,99,101,110,116,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,117,99,100,45,117,116,105,108,45,48,46,49,46,49,92,115,114,99,92,110,97,109,101,46,114,115],"byte_start":9175,"byte_end":9198,"line_start":72,"line_end":72,"column_start":8,"column_end":31},"name":"symbolic_name_normalize","qualname":"::name::symbolic_name_normalize","value":"fn (string: &mut String) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Normalize the given symbolic name in place according to UAX44-LM3.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":24},"span":{"file_name":[67,58,92,85,115,101,114,115,92,83,46,80,101,114,99,101,110,116,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,117,99,100,45,117,116,105,108,45,48,46,49,46,49,92,115,114,99,92,112,114,111,112,101,114,116,121,46,114,115],"byte_start":13091,"byte_end":13104,"line_start":6,"line_end":6,"column_start":10,"column_end":23},"name":"PropertyTable","qualname":"::property::PropertyTable","value":"&'static [(&'static str, &'static str)]","parent":null,"children":[],"decl_id":null,"docs":" The type of a property name table.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":25},"span":{"file_name":[67,58,92,85,115,101,114,115,92,83,46,80,101,114,99,101,110,116,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,117,99,100,45,117,116,105,108,45,48,46,49,46,49,92,115,114,99,92,112,114,111,112,101,114,116,121,46,114,115],"byte_start":13436,"byte_end":13459,"line_start":14,"line_end":14,"column_start":8,"column_end":31},"name":"canonical_property_name","qualname":"::property::canonical_property_name","value":"fn (property_table: PropertyTable, normalized_property_name: &str) -> Option<&'static str>","parent":null,"children":[],"decl_id":null,"docs":" Find the canonical property name for the given normalized property name.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":26},"span":{"file_name":[67,58,92,85,115,101,114,115,92,83,46,80,101,114,99,101,110,116,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,117,99,100,45,117,116,105,108,45,48,46,49,46,49,92,115,114,99,92,112,114,111,112,101,114,116,121,46,114,115],"byte_start":14366,"byte_end":14384,"line_start":36,"line_end":36,"column_start":10,"column_end":28},"name":"PropertyValueTable","qualname":"::property::PropertyValueTable","value":"&'static [(&'static str, PropertyValues)]","parent":null,"children":[],"decl_id":null,"docs":" Type of a property value table.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":27},"span":{"file_name":[67,58,92,85,115,101,114,115,92,83,46,80,101,114,99,101,110,116,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,117,99,100,45,117,116,105,108,45,48,46,49,46,49,92,115,114,99,92,112,114,111,112,101,114,116,121,46,114,115],"byte_start":14663,"byte_end":14677,"line_start":43,"line_end":43,"column_start":10,"column_end":24},"name":"PropertyValues","qualname":"::property::PropertyValues","value":"&'static [(&'static str, &'static str)]","parent":null,"children":[],"decl_id":null,"docs":" A mapping of property values for a specific property.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":28},"span":{"file_name":[67,58,92,85,115,101,114,115,92,83,46,80,101,114,99,101,110,116,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,117,99,100,45,117,116,105,108,45,48,46,49,46,49,92,115,114,99,92,112,114,111,112,101,114,116,121,46,114,115],"byte_start":15213,"byte_end":15228,"line_start":56,"line_end":56,"column_start":8,"column_end":23},"name":"property_values","qualname":"::property::property_values","value":"fn (property_value_table: PropertyValueTable, canonical_property_name: &str) -> Option<PropertyValues>","parent":null,"children":[],"decl_id":null,"docs":" Find the set of possible property values for a given property.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":29},"span":{"file_name":[67,58,92,85,115,101,114,115,92,83,46,80,101,114,99,101,110,116,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,117,99,100,45,117,116,105,108,45,48,46,49,46,49,92,115,114,99,92,112,114,111,112,101,114,116,121,46,114,115],"byte_start":15943,"byte_end":15967,"line_start":76,"line_end":76,"column_start":8,"column_end":32},"name":"canonical_property_value","qualname":"::property::canonical_property_value","value":"fn (property_values: PropertyValues, normalized_property_value: &str) -> Option<&'static str>","parent":null,"children":[],"decl_id":null,"docs":" Find the canonical property value for the given normalized property\n value.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":31},"span":{"file_name":[67,58,92,85,115,101,114,115,92,83,46,80,101,114,99,101,110,116,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,117,99,100,45,117,116,105,108,45,48,46,49,46,49,92,115,114,99,92,117,110,105,99,111,100,101,95,116,97,98,108,101,115,92,106,97,109,111,95,115,104,111,114,116,95,110,97,109,101,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"jamo_short_name","qualname":"::unicode_tables::jamo_short_name","value":"C:\\Users\\S.Percentage\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\ucd-util-0.1.1\\src\\unicode_tables\\jamo_short_name.rs","parent":null,"children":[{"krate":0,"index":32}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":32},"span":{"file_name":[67,58,92,85,115,101,114,115,92,83,46,80,101,114,99,101,110,116,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,117,99,100,45,117,116,105,108,45,48,46,49,46,49,92,115,114,99,92,117,110,105,99,111,100,101,95,116,97,98,108,101,115,92,106,97,109,111,95,115,104,111,114,116,95,110,97,109,101,46,114,115],"byte_start":17785,"byte_end":17800,"line_start":7,"line_end":7,"column_start":11,"column_end":26},"name":"JAMO_SHORT_NAME","qualname":"::unicode_tables::jamo_short_name::JAMO_SHORT_NAME","value":"&'static [(u32, &'static str)]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[],"refs":[{"kind":"Mod","span":{"file_name":[67,58,92,85,115,101,114,115,92,83,46,80,101,114,99,101,110,116,97,103,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,117,99,100,45,117,116,105,108,45,48,46,49,46,49,92,115,114,99,92,117,110,105,99,111,100,101,95,116,97,98,108,101,115,92,109,111,100,46,114,115],"byte_start":17522,"byte_end":17537,"line_start":1,"line_end":1,"column_start":9,"column_end":24},"ref_id":{"krate":0,"index":31}}],"macro_refs":[],"relations":[]}